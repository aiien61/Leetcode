This question is acknowledged as one of the more intricate challenges within the Doubly Linked List 
section. It's not unusual for programmers to find this task quite formidable.

It's crucial to approach it methodically. 
Recommend drawing out the list structures and operations to better visualize the problem. 
This challenge demands a deep understanding of Doubly Linked Lists' unique characteristics and 
manipulation techniques.

Use this opportunity to deepen the understanding, but also remember it's absolutely fine to come 
back to this problem later if it feels overwhelming now. Progress in complex concepts like these 
sometimes requires stepping back and revisiting with fresh insights.

Now, here is the problem:

_________________________________

Given a doubly linked list.

Implement a method called swap_pairs within the class that swaps the values of adjacent nodes in the 
linked list. The method should not take any input parameters.

Note: This DoublyLinkedList does not have a tail pointer which will make the implementation easier.

Example:

1 <-> 2 <-> 3 <-> 4 should become 2 <-> 1 <-> 4 <-> 3

The implementation should handle edge cases such as an empty linked list or a linked list with only 
one node.

Note: Must solve the problem WITHOUT MODIFYING THE VALUES in the list's nodes 
(i.e., only the nodes' prev and next pointers may be changed.)

